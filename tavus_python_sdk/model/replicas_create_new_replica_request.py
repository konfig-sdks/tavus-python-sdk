# coding: utf-8

"""
    Tavus Developer API Collection

    We're an AI video research company making personalized video possible at scale. Generate videos of yourself, and never record again! Available via web app & developer APIs.

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from tavus_python_sdk import schemas  # noqa: F401


class ReplicasCreateNewReplicaRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "train_video_url",
        }
        
        class properties:
            train_video_url = schemas.StrSchema
            callback_url = schemas.StrSchema
            replica_name = schemas.StrSchema
            __annotations__ = {
                "train_video_url": train_video_url,
                "callback_url": callback_url,
                "replica_name": replica_name,
            }
    
    train_video_url: MetaOapg.properties.train_video_url
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["train_video_url"]) -> MetaOapg.properties.train_video_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["callback_url"]) -> MetaOapg.properties.callback_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["replica_name"]) -> MetaOapg.properties.replica_name: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["train_video_url", "callback_url", "replica_name", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["train_video_url"]) -> MetaOapg.properties.train_video_url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["callback_url"]) -> typing.Union[MetaOapg.properties.callback_url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["replica_name"]) -> typing.Union[MetaOapg.properties.replica_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["train_video_url", "callback_url", "replica_name", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        train_video_url: typing.Union[MetaOapg.properties.train_video_url, str, ],
        callback_url: typing.Union[MetaOapg.properties.callback_url, str, schemas.Unset] = schemas.unset,
        replica_name: typing.Union[MetaOapg.properties.replica_name, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ReplicasCreateNewReplicaRequest':
        return super().__new__(
            cls,
            *args,
            train_video_url=train_video_url,
            callback_url=callback_url,
            replica_name=replica_name,
            _configuration=_configuration,
            **kwargs,
        )
